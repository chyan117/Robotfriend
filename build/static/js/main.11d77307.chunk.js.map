{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","Name","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filterRobots","filter","robot","toLowerCase","includes","length","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCHSC,EAbF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GAC3B,OAEC,yBAAKC,UAAY,oDAChB,yBAAKC,IAAI,QAAQC,IAAG,+BAA2BH,EAA3B,cACpB,6BACC,4BAAKF,GACL,2BAAIC,MCYOK,EAlBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEZC,EAAgBD,EAAOE,KAAK,SAACC,EAAMC,GAExC,OAAQ,kBAAC,EAAD,CACRC,IAAKD,EACLT,GAAMK,EAAOI,GAAGT,GAChBF,KAAQO,EAAOI,GAAGE,KAClBZ,MAASM,EAAOI,GAAGV,WAGpB,OACC,6BACIO,ICASM,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,yBAAKZ,UAAY,OAEjB,2BACCA,UAAY,mCACZa,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCDAI,G,MARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,YC+CJC,E,kDA3Cd,aAAc,IAAD,8BACZ,gBAQDC,eAAiB,SAACC,GAEjB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SATzC,EAAKC,MAAQ,CACZ1B,OAAQ,GACRuB,YAAa,IAJF,E,gEAcO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAKA,EAASC,UAC3BF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACtB,OAAQ+B,S,+BAI9B,MAEuBC,KAAKN,MAA5B1B,EAFA,EAEAA,OAAQuB,EAFR,EAEQA,YACTU,EAAejC,EAAOkC,QAAO,SAAAC,GAClC,OAAOA,EAAM1C,KAAK2C,cAAcC,SAASd,EAAYa,kBAEtD,OAAIJ,KAAKN,MAAM1B,OAAOsC,OAGpB,yBAAK1C,UAAY,MAChB,2CACA,kBAAC,EAAD,CAAWY,aAAcwB,KAAKZ,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUpB,OAAUiC,MAPa,2C,GA7BrBM,IAAMC,WCDxBC,IAASC,OAGP,kBAAC,EAAD,MACAC,SAASC,eAAe,SN0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.11d77307.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n// We are writing JSX\nconst Card = ({name, email, id}) =>{\n\treturn(\n\t\t// Only return one element\n\t\t<div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5' >\n\t\t\t<img alt='photo' src= {`https://robohash.org/${id}?200x200`}/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card.js';\n\nconst CardList = ({robots})=>{\n\t// Map is iterable\n\tconst cardComponent = robots.map( (user, i) =>{\n\t\t// For Need to give key\n\t\treturn (<Card \n\t\tkey={i} \n\t\tid = {robots[i].id} \n\t\tname = {robots[i].Name }  \n\t\temail = {robots[i].email }/>\n\t\t)\n\t});\n\treturn(\n\t\t<div>\n  \t\t\t{cardComponent}\n  \t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n\treturn(\n\t\t<div className = 'pa2'>\n\n\t\t<input \n\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search' \n\t\t\tplaceholder='search robots' \n\t\t\tonChange = {searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\nconst Scroll = (props) =>{\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'} } >\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;\n","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox.js';\nimport '../index.css';\nimport { robots } from '../Robot';\nimport Scroll from '../components/Scroll.js';\nclass App extends React.Component {\n\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n// Anthing own method used below template\n\tonSearchChange = (event)=>{\n\t\t// Not this.state.searchfield = event.tar.....;\n\t\tthis.setState({searchfield: event.target.value});\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response =>  response.json())\n\t\t.then(users=> this.setState({robots: users}) );\n\t}\n\n\n\trender(){\n\t\t// When the state change, it will automaticaaly render\n\t\tconst {robots, searchfield} = this.state;\n\t\tconst filterRobots = robots.filter(robot=>{\n\t\t\treturn\trobot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t})\n\t\tif(!this.state.robots.length)\treturn <h1>Loading</h1>\n\t\telse{\n\t\t\treturn(\n\t\t\t\t<div className = 'tc'>\n\t\t\t\t\t<h1>Robofrirnds</h1>\n\t\t\t\t\t<SearchBox\tsearchChange={this.onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<CardList robots = {filterRobots}/>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App.js';\nReactDOM.render(\n  // <React.StrictMode>,\n  // </React.StrictMode>,\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}